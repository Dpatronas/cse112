#!/usr/bin/perl
# $Id: pmake,v 1.37 2021-02-24 13:17:46-08 - - $

# Despina Patronas (dpatrona)
# Adam Barsness    (abarsnes)

use strict;
use warnings;

$0 =~ s|.*/||;
use Getopt::Std;
use Data::Dumper;
use strict;
use warnings;

$Data::Dumper::Indent = 1;
$Data::Dumper::Sortkeys = 1;
$Data::Dumper::Terse = 1;
sub dump_hash ($\%) {
   my ($label, $hashptr) = @_;
   print STDERR "%$label: ", Data::Dumper->Dump ([$hashptr]);
}

my $STATUS = 0;
END { exit $STATUS; }
$SIG{'__WARN__'} = sub { print STDERR @_; $STATUS = 1; };
$SIG{'__DIE__'} = sub { print STDERR @_; $STATUS = 1; exit; };

# sigtoperl: x86_64 Linux unix1.lt.ucsc.edu
# sigtoperl: Sun Nov 22 17:33:55 2020
my %strsignal = (
    0 => "Unknown signal 0",
    1 => "Hangup",
    2 => "Interrupt",
    3 => "Quit",
    4 => "Illegal instruction",
    5 => "Trace/breakpoint trap",
    6 => "Aborted",
    7 => "Bus error",
    8 => "Floating point exception",
    9 => "Killed",
   10 => "User defined signal 1",
   11 => "Segmentation fault",
   12 => "User defined signal 2",
   13 => "Broken pipe",
   14 => "Alarm clock",
   15 => "Terminated",
   16 => "Stack fault",
   17 => "Child exited",
   18 => "Continued",
   19 => "Stopped (signal)",
   20 => "Stopped",
   21 => "Stopped (tty input)",
   22 => "Stopped (tty output)",
   23 => "Urgent I/O condition",
   24 => "CPU time limit exceeded",
   25 => "File size limit exceeded",
   26 => "Virtual timer expired",
   27 => "Profiling timer expired",
   28 => "Window changed",
   29 => "I/O possible",
   30 => "Power failure",
   31 => "Bad system call",
);

### Hashes ###
my %OPTIONS; # options defined
my %GRAPH;   # dependencies
my %MACROS;  # defined macros
my %VISITED; # Hash for visited goals. Set vist goal: ${VISITED} = 1

# When a command is detected, run_command to execute cmd
# Returns 0 or undef when everything runs fine

sub run_command (@) {   
   my (@command) = @_;
   sub run_command(@); 

   # Check @ echo and -
   my $rm_at = substr $command[0], 7;  # remove @ echo 
   my $rm_dash = substr $command[0],2; # remove - 
   my $sym = substr $command[0], 0,1;  # capture symbol

   # Found at run_command without @ echo
   if ($sym eq "@") {
      run_command($rm_at);
   }

   elsif ($sym eq "-") {
     run_command($rm_dash);
   }

   # Run command normally with print
   else {
      #@command =~ s/\${(.*?)}/$MACROS{$1}{VALUE}||@command/ge;
      #@command =~ s/\$\$/\$/;            
      print "@command\n";
      my $status = eval {no warnings; system @command};

      # return undef means exit(0) success exit
      return undef unless $status;
      return "$!" if $status == -1;
      my $signal = $status & 0x7F;
      my $core = $status & 0x80;
      my $exit = ($status >> 8) & 0xFF;
      return "Error $exit" unless $signal || $core;
      return ($strsignal{$signal} || "Invalid Signal Number $signal")
           . ($core ? " (core dumped)" : "");
   }
}

my $MAKECMDGOALS;
my $Makefile = "Makefile";

sub usage() { die "Usage: $0 [-mgd] [target]\n" }
sub stop($) { die "$Makefile:@_. Stop.\n" }

sub scan_cmdline() {
   getopts "dgm", \%OPTIONS;
   usage unless @ARGV <= 1;
   $MAKECMDGOALS = $ARGV[0] if @ARGV == 1;
}

# Debugging purposes
sub dump_graph() {
   print STDERR "%MACROS:\n";
   for my $macro (sort keys %MACROS) {
      printf STDERR "%7d [%s] = [%s]\n",
             $MACROS{$macro}{LINE}, $macro, $MACROS{$macro}{VALUE};
   }
   print STDERR "MAKECMDGOALS = [$MAKECMDGOALS]\n";
   print STDERR "%GRAPH:\n";
   for my $target (sort keys %GRAPH) {
      my $prereqs = $GRAPH{$target}{PREREQS};
      printf STDERR "%7d [%s] :", $GRAPH{$target}{LINE}, $target;
      print STDERR " [$_]" for @$prereqs;
      print STDERR "\n";
      for my $cmd (@{$GRAPH{$target}{COMMANDS}}) {
         printf STDERR "%7d.\t[%s]\n", $cmd->{LINE}, $cmd->{CMD};;
      }
   }
}

sub load_Makefile() {
   open my $mkfile, "<$Makefile" or die "$0: $Makefile: $!";
   my $target;
   while (defined (my $line = <$mkfile>)) {
      next if $line =~ m/^\s*(#|$)/;
      # Defining a macros
      if (!$target && $line =~ m/^\s*(\S+)\s*=\s*(.*?)\s*$/) {
         $MACROS{$1} = {LINE=> $., VALUE=> $2};
      }
      elsif ($line =~ m/^(\S+)\s*:\s*(.*)/) {
         my $tempprereq = $2;
         $target = $1;              # Keep default if not macro

         # Replace macros
         $target =~ s/\${(.*?)}/$MACROS{$1}{VALUE}||$target/ge;
         $tempprereq =~ s/\${(.*?)}/$MACROS{$1}{VALUE}||$tempprereq/ge;
         $GRAPH{$target}{PREREQS} = [split ' ', $tempprereq];
         $GRAPH{$target}{LINE} = $.;
         $MAKECMDGOALS = $target unless $MAKECMDGOALS;
      }elsif ($line =~ m/^\t(.*)/) {
         if (defined $target) {
            my $tempcmd = $1;
            $tempcmd =~ s/\${(.*?)}/$MACROS{$1}{VALUE}||$tempcmd/ge;
            push @{$GRAPH{$target}{COMMANDS}},
                 {LINE=> $., CMD=> $tempcmd};
         }else {
            stop "$.: Command before first target";
         }
      }else {
         stop "$.: Missing separator";
      }
   }
   close $mkfile;
}

sub get_time($) {
   my ($filename) = @_;
   my @stat = stat $filename;
   return @stat ? $stat[9] : undef;
}

my $updatecheck = 1;
my $currentcheck = 1;

sub make_goal($) {
   my ($goal) = @_;
   sub make_goal($);                     # fwd declaration fnx
  
   # Check if goal is !target
   if(not(exists $GRAPH{$goal})){
      if(-e $goal){
         return get_time($goal);
      }
      else{
         print "make: *** No rule to make target '$goal'. Stop.\n";
         exit(1);
      }
   }

   my $prereq = $GRAPH{$goal}{PREREQS};  # ref prereq array
   my $commds = $GRAPH{$goal}{COMMANDS}; # ref commands array

   if($updatecheck){
      if ($goal eq "all"){
         foreach my $pre (@$prereq) {
            if (not(-e $pre)) {
               $currentcheck = 0;
            }
         }
      }
      else{
         if (not(-e $goal)) {
            $currentcheck = 0;
         }
      }

      if($currentcheck){
         if($goal eq "all"){
            print "make: Nothing to be done for 'all'.\n";
         }
         else{
            print "make: '$goal' is up to date.\n";
         }
         return;
      }
   }
   
   # For each prereq (check if prereq exists or not)
   if (defined $prereq->[0]) {         # deref check indx0 prereq arr
      # Prereq exists
      foreach my $pre (@$prereq) {     # iterate prereq arr indxs
         make_goal($pre);              # Recurs make on indexes
      }
      # Check command on prereq
      foreach my $cmd (@$commds) {
         my %cmdhash = %$cmd;          # Make a hash of cmds
         # run_command($cmdhash{CMD});   # run cmd

         # check for error in run command
         if (defined run_command($cmdhash{CMD})) {
            print "pmake: *** [Makefile:$cmdhash{LINE}: $goal] ";
            print "Error 1\n";
            exit(1);
         }
      }
   }
   # Check Commands (no prereq found)
   else {
      #print "no prereq\n";
      foreach my $cmd (@$commds) {  
         my %cmdhash = %{$cmd};        # make hash of cmds
         # check for -
         if (defined run_command($cmdhash{CMD})
                      and substr($cmdhash{CMD},0,1) eq '-') {
            print "pmake: [Makefile:$cmdhash{LINE}: $goal] ";
            print "Error 1 (ignored)\n";
         }
      }
   } 
}

scan_cmdline;
load_Makefile;

dump_graph if $OPTIONS{'d'};

dump_hash ("MACROS", %MACROS) if $OPTIONS{'m'};
dump_hash ("GRAPH", %GRAPH) if $OPTIONS{'g'};
dump_graph if $OPTIONS{'d'};

make_goal ($MAKECMDGOALS);

